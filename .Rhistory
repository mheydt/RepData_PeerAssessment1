# it should be ordered already by day and interval, but I'll do it anyway
d <- d[with(d, order(date, interval))]
d <- d[with(d, order(date, interval)),]
View(d)
View(meanStepsByInterval)
tidied <- d
nas <- is.na(d$steps)
nas
whichNAs <- which(is.na(d$steps))
length(whichNAs)
tidied[whichNAs, steps] <- meanStepsByInterval[d[whichNAs, interval]]
tidied[whichNAs, steps] <- meanStepsByInterval[d[whichNAs, d$interval]]
intervalForNAs <- d[whichNAs, interval]
intervalForNAs <- d[whichNAs, d$interval]
intervalForNAs <- d$interval[whichNAs]
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs]$interval]
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs, d$interval]
View(tidied)
View(tidied)
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs, d$interval]]
View(meanStepsByInterval)
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs]$interval]$steps
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs,]$interval]$steps
tidied[whichNAs]$steps <- meanStepsByInterval[d[whichNAs,]$interval,]$steps
tidied[whichNAs,]$steps <- meanStepsByInterval[d[whichNAs,]$interval,]$steps
tidied[whichNAs,]
names(tidied[whichNAs,])
meanStepsByInterval[d[whichNAs,]$interval,]$steps
tidied[whichNAs,]$steps <- meanStepsByInterval[d[whichNAs,]$interval,]$steps
d[whichNAs,]$interval
meanStepsByInterval[d[whichNAs,]$interval,]
nas <- is.na(d$steps)
d[nas,]
tidied
is.na(tidied$steps)
tidied[is.na(tidied$steps)]
tidied[is.na(tidied$steps),]
tidied[is.na(tidied$steps),]
meanStepsByInterval[tidied[is.na(tidied$steps),]/5,]
meanStepsByInterval[tidied[is.na(tidied$steps),]$interval/5,]
tidied[is.na(tidied$steps),]$interval
tidied[is.na(tidied$steps),]$interval/5
tidied[is.na(tidied$steps),]$interval/288
tidied[is.na(tidied$steps),]$interval5
tidied[is.na(tidied$steps),]$interval/5
(24*60)/5
tidied[is.na(tidied$steps),]$interval
View(d)
2355/5
(24*60)
2355/5
meanStepsByInterval <- aggregate(steps ~ interval, d, mean)
View(meanStepsByInterval)
2340/5
5*24*60
View(d)
2355/5
24*60
24*60*60
24*60*60/5
288*5
2355/5
2355/16
2355/12
2355/5
2355/10
12*24
12*24*5
105/100
trunc(d$interval / 100) * 12 + (d$interval % 100)/5
trunc(d$interval / 100) * 12
trunc(d$interval / 100)
d$interval % 60
d$interval %% 60
(d$interval %% 60)/5
trunc(d$interval / 100) *12
d$actualInterval <- trunc(d$interval / 100) * 12 + (d$interval %% 60)/5
View(d)
d$actualInterval <- trunc(d$interval / 100) * 12 + (d$interval %% 100)/5
View(d)
stepsByDay <- aggregate(steps ~ date, d, sum)
ggplot(stepsByDay, aes(x=date, y=steps)) + geom_bar(stat="identity")
View(d)
library(scales)
library(ggplot2)
library(plyr)
# read data
d = read.csv("activity.csv")
# convert from factors
d$interval <- as.numeric(as.character(d$interval))
d$steps <- as.numeric(as.character(d$steps))
d$date <- as.Date(d$date)
# it should be ordered already by day and interval, but I'll do it anyway
d <- d[with(d, order(date, interval)),]
# the interval in the data is wonky - they are not continuous
# 0 - 55, 100-155, 200-255, ...
# hundreds = hour of the day
# remainder of value / 100 is the minutes into the hour
# so I'm going to remap them to be continuous from 1 through 288
# this is important for mapping NAs to averages later in the analysis
d$actualInterval <- trunc(d$interval / 100) * 12 + (d$interval %% 100)/5
stepsByDay <- aggregate(steps ~ date, d, sum)
ggplot(stepsByDay, aes(x=date, y=steps)) + geom_bar(stat="identity")
meanStepsPerDay <- mean(stepsByDay$steps)
medianStepsPerDay <- median(stepsByDay$steps)
View(stepsByDay)
meanStepsByActualInterval <- aggregate(steps ~ actualInterval, d, mean)
View(meanStepsByActualInterval)
View(d)
ggplot(meanStepsByActualInterval, aes(actualInterval)) + geom_line(aes(y=steps))
maxIntervalRow <- which.max(meanStepsByInterval$steps)
theIntervalWithMaxMeanSteps <- meanStepsByInterval$interval[maxIntervalRow,]
maxActualIntervalRow <- which.max(meanStepsByActualInterval$steps)
theIntervalWithMaxMeanSteps <- meanStepsByInterval$interval[maxIntervalRow,]
maxActualIntervalRow <- which.max(meanStepsByActualInterval$steps)
theIntervalWithMaxMeanSteps <- meanStepsByInterval$interval[maxActualIntervalRow,]
maxInterval <- which.max(meanStepsByActualInterval$steps) * 5
View(d)
maxActualInterval <- which.max(meanStepsByActualInterval$steps)
maxInterval <- trunc(maxActualInterval / 12) * 100 + (maxActualInterval %% 12) * 5
apply
?apply
d
f1 <- function(r)
{
r$steps
}
f1(d)
d[1,]
f(d[1,])
f1(d[1,])
f1 <- function(r, means)
{
if (is.na(r$steps)) means[r$actualIndex] else 0
}
f1 <- function(r, means)
{
if (is.na(r$steps)) means[r$actualIndex] else r$steps
}
f1(d[1,], meanStepsByInterval)
View(d)
f1(d[289,], meanStepsByInterval)
f1(d[1,], meanStepsByInterval)
d[1,]$actualIndex
f1 <- function(r, means)
{
if (is.na(r$steps)) means[r$actualInterval] else r$steps
}
f1(d[1,], meanStepsByInterval)
View(meanStepsByInterval)
f1 <- function(r, means)
{
if (is.na(r$steps)) means[r$actualInterval]$steps else r$steps
}
f1(d[1,], meanStepsByInterval)
d[1,]$actualIndex
d[1,]$actualInterval
f1 <- function(r, means)
{
if (is.na(r$steps)) means[r$actualInterval + 1]$steps else r$steps
}
f1(d[1,], meanStepsByInterval)
d[1,]$steps
d[1,]$actualInterval
d[1,]$actualInterval
meanStepsByInterval
f1 <- function(r, means)
{
if (is.na(r$steps)) means[means$interval==0]$steps else r$steps
}
f1(d[1,], meanStepsByInterval)
View(m)
View(meanStepsByActualInterval)
f1 <- function(r, means)
{
if (is.na(r$steps)) means[means$actualInterval==0]$steps else r$steps
}
f1(d[1,], meanStepsByInterval)
f1(d[1,], meanStepsByActualInterval)
meanStepsByActualInterval
meanStepsByActualInterval[actualIndex==0]$steps
meanStepsByActualInterval[actualInterval==0]$steps
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==0]$steps
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==0]
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==0]$steps
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5]
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5]$steps
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5]$steps
meanStepsByActualInterval$actualInterval
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5][,1]
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5]
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5,]
meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==5,]$steps
f1 <- function(r, means)
{
if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
}
f1(d[1,], meanStepsByActualInterval)
]
apply(d, 1, f1)
apply(d, 2, f1)
apply(d, 1, function(x) class(x))
x <- apply(d, 1, function(x) class(x))
x
x <- apply(d, 1, function(x) x)
x
x <- apply(d[1:1,], 1, function(x) x)
x
x <- apply(d[1:1,], 2, function(x) x)
x
x <- apply(d[1:1,], 2, function(x) class(x$interval))
x <- sapply(d[1:1,], 2, function(x) class(x$interval))
x <- sapply(d[1:1,], function(x) x)
x
x <- sapply(d[1:1,], function(x) class(x$interval))
x <- sapply(d[1:1,], function(x) class(x[['interval']]))
x <- sapply(d[1:1,], function(x) x['interval'])
x
x <- sapply(d[1:1,], function(x) x[['interval'[]])
x <- sapply(d[1:1,], function(x) x[['interval']])
x <- sapply(d[1:1,], function(x) class(x))
x
y <- sapply(d[1:1,], function(x) class(x))
y
y <- apply(d[1:1,], 1, function(x) class(x))
y
y <- apply(d[1:1,], 1, function(x) x)
y
class(y[4])
d[1:1,]
class(d[1:1,]$actualInterval)
y <- apply(d[1:2,], 1, function(x) x)
y
y <- apply(d, 1, function(x) x)
y
View(y)
y <- apply(d, 1, function(x) is.na(x[0]))
y <- apply(d[1:2], 1, function(x) is.na(x[0]))
y
y <- apply(d[1:2], 1, function(x) is.na(x[[0]]))
y <- apply(d[1:2], 1, function(x) is.na(x[[1]]))
y
?mapply
mapply(function(x) x, d)
mapply(function(x) x$actualIndex, d)
mapply(function(x) x[1], d)
mapply(function(x) x[1]$actualInterval, d)
mapply(function(x) x[[1]], d)
mapply(function(x) x[[1]][1], d)
mapply(function(x) x[[1]][[1]], d)
y <- mapply(function(x) x[[1]][[1]], d)
y[steps]
y['steps']
y <- apply(d[1:2], 1, function(x) is.na(x[[1]]))
y
y <- apply(d[1:2], 1, function(x) x)
y
View(y)
View(y)
View(y)
y <- apply(d[1:2], 1, function(x) x)
y
y <- apply(d[1:2,], 1, function(x) x)
y
y <- apply(d[1:2,], 1, function(x) x)[1]
y
y <- apply(d[1:2,], 1, function(x) x)[1,]
y
y <- apply(d[1:2,], 1, function(x) x)[2,]
y
y <- apply(c(d$steps, d$actualInterval), 1, function(x) x)[2,]
c(d$steps)
c(d$steps)
c(d$steps, d$actualInterval)
y <- c(d$steps, d$actualInterval)
y
y <- r(d$steps, d$actualInterval)
mapply(function(x) x, d[1:2,])
mapply(function(x) x, d[1:2,])$steps
mapply(function(x) x, d[1:2,])[0]
mapply(function(x) x, d[1:2,])[[0]]
mapply(function(x) x, d[1:2,])
mapply(function(x) is.na(x), d[1:2,])
d[1:2,]
d[1:2,][1,]
d[1:2,][1,1]
?lapply
lapply(d, function(x) x)
lapply(d, function(x) class(x)
)
lapply(d, function(x) d[1])
y <- lapply(d, function(x) d[1])
y <- lapply(d, function(x) d)
y
f1 <- function(data, means)
{
result = c()
for (r in data)
{
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
if (is.na(r$steps))
cbind(c, -1)
else
cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
}
c
}
f1(d, meanStepsByActualIndex)
class(d)
f1 <- function(data, means)
{
result = c()
for (r in data)
{
print (r)
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
if (is.na(r$steps))
cbind(c, -1)
else
cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
}
c
}
f1(d, meanStepsByActualIndex)
f1 <- function(data, means)
{
result = c()
for (r in data)
{
print (r)
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#if (is.na(r$steps))
# cbind(c, -1)
#else
#  cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
}
c
}
f1(d, meanStepsByActualIndex)
?apply
apply(d, 1, function(x) x[1])
apply(d, 1, function(x) x[2])
map <- function(steps, interval, intervalMeans)
{
# result = c()
#for (r in data)
#{
#    print (r)
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#if (is.na(r$steps))
# cbind(c, -1)
#else
#  cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#}
#c
if (is.na(steps)) -1 else steps
}
View(d)
map(d[1,1], 1, [])
map(d[1,1], 1, c())
map(d[2500,1], 1, c())
map(d[1,1], 1, meanStepsByActualInterval)
map <- function(steps, interval, intervalMeans)
{
# result = c()
#for (r in data)
#{
#    print (r)
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#if (is.na(r$steps))
# cbind(c, -1)
#else
#  cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#}
#c
if (is.na(steps)) intervalMeans[interval] else steps
}
map(d[1,1], 1, meanStepsByActualInterval)
map <- function(steps, interval, intervalMeans)
{
# result = c()
#for (r in data)
#{
#    print (r)
#  if (is.na(r$steps)) meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#if (is.na(r$steps))
# cbind(c, -1)
#else
#  cbind(c, r$steps) #meanStepsByActualInterval[meanStepsByActualInterval$actualInterval==r$actualInterval,]$steps else r$steps
#}
#c
if (is.na(steps)) intervalMeans[interval,2] else steps
}
map(d[1,1], 1, meanStepsByActualInterval)
apply(d, 1, map)
apply(d, 1, function(x) map(x[1], x[2], meanStepsByActualInternval))
apply(d, 1, function(x) map(x[1], x[2], meanStepsByActualInterval))
y <- apply(d, 1, function(x) map(x[1], x[2], meanStepsByActualInterval))
y <- apply(d, 1, function(x) map(as.numeric(x[1]), as.numeric(x[2]), meanStepsByActualInterval))
y
''
t <- d
t
t[is.na(t)]
length(t[is.na(t)])
t[is.na(t)] = -1
t
View(t)
avgs <- meanStepsByActualInterval
avgs
t <- d
t[is.na(t)] = avgs
t
View(t)
t <- d
t[is.na(t)] = avgs$step
View(t)
t <- d
t[is.na(t)]$actualIndex
t[is.na(t),]$actualIndex
t[is.na(t),]
t[is.na(t),][0]
t[is.na(t),][1]
t[is.na(t),][2]
t
t$avg <- t$steps
t
t$avg <- avgs[t$actualIndex]
t$avg <- avgs[t$actualIndex,2]
t$avg <- avgs[t$actualIndex,1]
?merge
t <- d
merge(t, meanStepsByActualIndex)
merge(t, meanStepsByActualIntervals)
View(meanStepsByActualInterval)
View(meanStepsByActualInterval)
merge(t, meanStepsByActualInterval
)
m <- merge(t, meanStepsByActualInterval)
m
View(m)
View(t)
View(meanStepsByActualInterval)
m <- merge(t, meanStepsByActualInterval)
View(m)
View(meanStepsByActualInterval)
View(t)
View(meanStepsByActualInterval)
m <- merge(t, meanStepsByActualInterval, all=TRUE)
View(m)
unique(t$actualInterval)
sort(unique(t$actualInterval))
View(meanStepsByActualInterval)
View(meanStepsByActualInterval)
m <- merge(t, meanStepsByActualInterval, all.X = true)
View(m)
View(meanStepsByActualInterval)
join(t, meanStepsByActualInterval)
m <- join(t, meanStepsByActualInterval)
m <- merge(t, meanStepsByActualInterval, by=actualInterval)
m <- merge(t, meanStepsByActualInterval, by="actualInterval"))
m <- merge(t, meanStepsByActualInterval, by="actualInterval")
View(m)
roworder <- nrow[d]
tidied <- merge(d, meanStepsByActualInterval, by="actualInterval")
tidied <- tidied[roworder,]
library(scales)
library(ggplot2)
library(plyr)
# read data
d = read.csv("activity.csv")
# convert from factors
d$interval <- as.numeric(as.character(d$interval))
d$steps <- as.numeric(as.character(d$steps))
d$date <- as.Date(d$date)
# it should be ordered already by day and interval, but I'll do it anyway
d <- d[with(d, order(date, interval)),]
# and add in a row id to help resort
d$rowid <- 1:nrow(d)
View(d)
d$actualInterval <- trunc(d$interval / 100) * 12 + (d$interval %% 100)/5
tidied <- merge(d, meanStepsByActualInterval, by="actualInterval")
tidied <- tidied[tidied$rowid,]
View(tidied)
tidied <- merge(d, meanStepsByActualInterval, by="actualInterval")
View(tidied)
tidied <- tidied[order(tidied$rowid),]
View(tidied)
t <- tidied
t$imputedSteps <- if (is.na(t$steps.x)) t$steps.y else t$steps.x
View(tidied)
tidied$imputedSteps[is.na(tidied$steps.x)] <- tidied$steps.y[is.na(tidied$steps.X)]
is.na(tidied$steps.X)
tidied$imputedSteps[is.na(tidied$steps.x)] <- tidied$steps.y[is.na(tidied$steps.x)]
View(tidied)
tidied$steps.x[is.na(tidied$steps.x)] <- tidied$steps.y[is.na(tidied$steps.x)]
View(tidied)
View(tidied)
named(tidied)[names(tidied)=="steps.x"] <- "steps"
names(tidied)[names(tidied)=="steps.x"] <- "steps"
View(tidied)
names(tidied)
tidied <- tidied[,-which(names(tidied) %in% c("steps.y", "imputedSteps"))]
View(tidied)
tidied <- tidied[,-which(names(tidied) %in% c("steps.y", "imputedSteps", "rowid", "row.names"))]
View(tidied)
imputedStepsByDay <- aggregate(steps ~ date, d, tidied)
View(mtcars)
imputedStepsByDay <- aggregate(steps ~ date, tidied, sum)
imputedMeanStepsPerDay <- mean(stepsByDay$steps)
imputedMedianStepsPerDay <- median(stepsByDay$steps)
ggplot(imputedStepsByDay, aes(x=date, y=steps)) + geom_bar(stat="identity")
